# Generated by Django 4.0.7 on 2022-08-26 00:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Name of Scholarship', max_length=4098)),
                ('providedby', models.CharField(help_text='Enter name of sponsor or organization', max_length=4098, verbose_name='Provided By')),
                ('eligibilitycriteria', models.CharField(help_text='Enter Eligibility Criteria', max_length=4098, verbose_name='Eligibility Criteria')),
                ('exam', models.CharField(help_text='Enter if any exam is required', max_length=4098)),
                ('scholarshipamount', models.CharField(max_length=4098, verbose_name='Scholarship Amount')),
                ('applicationfees', models.CharField(max_length=4098, verbose_name='Application Fees')),
                ('deadline', models.CharField(max_length=4098)),
                ('link', models.CharField(help_text='Enter 404 if not available', max_length=4098)),
                ('category', models.CharField(blank=True, choices=[('National', 'NATIONAL'), ('International', 'INTERNATIONAL')], max_length=4098, null=True, verbose_name='Category')),
                ('levels', models.CharField(blank=True, choices=[('Undergraduate', 'UNDERGRADUATE'), ('Postgraduate', 'POSTGRADUATE'), ('Phd', 'PhD'), ('Others', 'OTHERS')], max_length=4098, null=True, verbose_name='Levels')),
                ('description', models.TextField(help_text='Enter Description of Scholarship', max_length=4098, verbose_name='Description')),
                ('like', models.ManyToManyField(blank=True, related_name='liked_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=256)),
                ('message', models.TextField(max_length=4098)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=4098, null=True, verbose_name='username')),
                ('password', models.CharField(default='Password123', max_length=4098, verbose_name='password')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email')),
                ('income', models.CharField(blank=True, choices=[('0-100000', '0-100000'), ('100001-500000', '100001-500000'), ('500001-1000000', '500001-1000001'), ('Greater than 1000000', 'GREATER THAN 1000000')], max_length=50, null=True, verbose_name='Income')),
                ('branch', models.CharField(blank=True, choices=[('Computer Science', 'COMPUTER SCIENCE'), ('STEM', 'STEM'), ('All', 'ALL'), ('Commerce', 'COMMERCE'), ('Science', 'SCIENCE'), ('Engineering', 'ENGINEERING'), ('Arts', 'ARTS'), ('Law', 'LAW'), ('Medicine', 'MEDICINE'), ('Others', 'OTHERS')], max_length=4098, null=True, verbose_name='Branch')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'MALE'), ('Female', 'FEMALE'), ('Other', 'OTHER'), ('Prefer not to say', 'PREFER NOT TO SAY')], max_length=4098, null=True, verbose_name='Gender')),
                ('marks_10', models.IntegerField(blank=True, null=True, verbose_name='10th Marks')),
                ('marks_12', models.IntegerField(blank=True, null=True, verbose_name='12th Marks')),
                ('caste', models.CharField(blank=True, choices=[('SC', 'SC'), ('ST', 'ST'), ('OBC', 'OBC'), ('General', 'General')], max_length=4098, null=True, verbose_name='Caste')),
                ('degree', models.CharField(blank=True, choices=[('BA', 'BA'), ('BSc', 'BSc'), ('BCom', 'BCom'), ('BBA', 'BBA'), ('MBA', 'MBA'), ('MSc', 'MSc'), ('MCom', 'MCom'), ('MCA', 'MCA'), ('MPhil', 'MPhil'), ('PhD', 'PhD'), ('Others', 'Others')], max_length=4098, null=True, verbose_name='Degree')),
                ('skill', models.CharField(blank=True, choices=[('Singing', 'SINGING'), ('Dancing', 'DANCING'), ('Reading', 'READING'), ('Writing', 'WRITING'), ('Cooking', 'COOKING'), ('Sports', 'SPORTS'), ('Others', 'OTHERS')], max_length=4098, null=True, verbose_name='Skill')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='', verbose_name='Comment')),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('commenter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='app.app')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='watchlist',
            field=models.ManyToManyField(blank=True, related_name='watchlist', to='app.app'),
        ),
    ]
